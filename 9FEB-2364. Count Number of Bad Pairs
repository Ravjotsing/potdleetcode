B.F
//T.C : O(n^2)
//S.C : O(1)
class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        int n = nums.size();
        long long int bad =0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]-i !=nums[j]-j){
                    bad++;
                }
            }
        }
        return bad;
    }
};

O.A - 1 - (Using hashmap)
//T.C : O(n)
//S.C : O(n)
class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        int n = nums.size();

        long long result = 0;
        for(int i = 0; i < n; i++) {
            nums[i] = nums[i]-i;
        }

        unordered_map<int, int> mp;
        mp[nums[0]] = 1;

        for(int j = 1; j < n; j++) {
            int countOfNumsj = mp[nums[j]];

            int totalNumsBeforej = j;

            int badPairs = totalNumsBeforej - countOfNumsj;

            result += badPairs;

            mp[nums[j]]++;
        }

        return result;
    }
};

O.A - 2
//T.C : O(n)
//S.C : O(n)
class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        unordered_map<int,int>mp;
        long long n = nums.size();
        long long goodpairs = 0;
        for(int i=0;i<n;i++){
            int key  = nums[i]-i;
            goodpairs+=mp[key];
            mp[key]++;
        }
        return (n*(n-1)) / 2 - goodpairs;
    }
};
